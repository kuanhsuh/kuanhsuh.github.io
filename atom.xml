<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My Coding Journey</title>
  <subtitle>Journey to a Full Stack Developer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-12T23:00:37.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Danny Huang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Web-Optimization - Semantic HTML</title>
    <link href="http://yoursite.com/2017/08/05/Web-Optimization-semantic-HTML/"/>
    <id>http://yoursite.com/2017/08/05/Web-Optimization-semantic-HTML/</id>
    <published>2017-08-05T10:48:33.000Z</published>
    <updated>2017-08-12T23:00:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>Semantic HTML is a feature in HTML. It exist back in HTML such as form, img, and tables. In HTML5, more semantic tags are added, for example header, footer, and nav. There are many benefits to for this. This added more structure to our html page. In the following, I’ll discuss the benefits of semantic HTML.</p>
<h2 id="Benefits"><a href="#Benefits" class="headerlink" title="Benefits"></a>Benefits</h2><ol>
<li><p>SEO<br>Better structure allows search engines to identify which block is more important.</p>
</li>
<li><p>Download Speed</p>
</li>
<li><p>Maintainence.<br>Better structure means better maintainence.</p>
</li>
<li><p>Better for disability browsing</p>
</li>
</ol>
<h2 id="How-to-implement"><a href="#How-to-implement" class="headerlink" title="How to implement"></a>How to implement</h2><p><img src="http://html5doctor.com/downloads/h5d-sectioning-flowchart.png" alt="HTML 5" title="HTML 5 semantic flow chart"></p>
<ol>
<li><p>Replace divs with section, header, nav, footer or others.</p>
</li>
<li><p>Use the above diagram to decide which html tag to use.</p>
</li>
</ol>
<h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><ul>
<li><a href="http://html5doctor.com/lets-talk-about-semantics/" target="_blank" rel="external">HTML5 Semantics</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h2&gt;&lt;p&gt;Semantic HTML is a feature in HTML. It
    
    </summary>
    
    
      <category term="Web Optimization" scheme="http://yoursite.com/tags/Web-Optimization/"/>
    
  </entry>
  
  <entry>
    <title>Web Optimization - Image</title>
    <link href="http://yoursite.com/2017/08/03/Web-Optimization-Image/"/>
    <id>http://yoursite.com/2017/08/03/Web-Optimization-Image/</id>
    <published>2017-08-02T22:31:42.000Z</published>
    <updated>2017-08-05T10:52:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>Image optimization is very important for your web app. It accounts for more than 50% of the loading time. 47% of users expect a webpage to load in under 2 seconds, and 40% will abandon a page that takes more than 3 seconds to load.</p>
<p>You can also optimize your image tag and image name for better SEO performance. Here’s a infograph of how loading time affects user experience.</p>
<p><img src="https://blog.kissmetrics.com/wp-content/uploads/2011/04/loading-time-lrg.jpg" alt="Kissmetrics Loading Time infographic" title="Kissmetrics Loading Time infogrpahic"></p>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ol>
<li>Change name to a descriptive name rather than a generic name such as DCMIMAGE10.jpg</li>
<li>Use alt tag for better SEO</li>
<li>Use the right dimension (simple tip 2x the mobile display dimension to get retina result)</li>
<li><p>know which file type to use png vs jpg<br><img src="https://cdn.shopify.com/s/files/1/0070/7032/files/book-image-quality-example.jpg" alt="PNG vs GIF vs JPG" title="PNG vs GIF vs JPG"></p>
</li>
<li><p>Use compression tools such as <a href="http://optimizilla.com/" target="_blank" rel="external">http://optimizilla.com/</a> and ImageOptim <a href="https://imageoptim.com/mac" target="_blank" rel="external">link</a> to remove unnesscessary meta tags and also compress image size for web without losing much quality.</p>
</li>
</ol>
<p>PRO TIP: As a general rule of thumb, I like my product photos to be a maximum 80-150 KB, and for large homepage hero images to be a maximum of 250-350 KB</p>
<h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><ul>
<li><a href="https://shopify.barrelny.com/how-to-resize-your-logo-image-for-retina/" target="_blank" rel="external">Resize for retina result</a></li>
<li><a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/image-optimization" target="_blank" rel="external">Google Developer - Image Optimization</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h2&gt;&lt;p&gt;Image optimization is very important f
    
    </summary>
    
    
      <category term="Web Optimization" scheme="http://yoursite.com/tags/Web-Optimization/"/>
    
  </entry>
  
  <entry>
    <title>CSS - Ways to Center Your Divs</title>
    <link href="http://yoursite.com/2017/07/28/CSS-Ways-to-Center-Your-Divs/"/>
    <id>http://yoursite.com/2017/07/28/CSS-Ways-to-Center-Your-Divs/</id>
    <published>2017-07-27T22:35:36.000Z</published>
    <updated>2017-07-28T12:56:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>Centering your div blocks both horizontally and vertically is a tricky tasky. Today I’m going to show you four ways to do it. So let’s do eeetttt!</p>
<h2 id="1-Transform-Technique"><a href="#1-Transform-Technique" class="headerlink" title="1. Transform Technique"></a>1. Transform Technique</h2><p>Make the parent div position relative so the child position will based on parent’s position. Next to move it top and left 50% and transform back 50% in both x &amp; y-axis.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// Transform</div><div class="line">.hero-image1 &#123;</div><div class="line">  background: #3498db;</div><div class="line">  height: 100vh;</div><div class="line">  position: relative;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.hero-text1 &#123;</div><div class="line">  text-align: center;</div><div class="line">  position: absolute;</div><div class="line">  top: 50%;</div><div class="line">  left: 50%;</div><div class="line">  color: white;</div><div class="line">  transform: translate(-50%, -50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-FlexBox"><a href="#2-FlexBox" class="headerlink" title="2. FlexBox"></a>2. FlexBox</h2><p>Flexbox is the easiest way to center a div. It’s a newer feature in css, the unforunately thing is some old browsers don’t support it. (sign…) Basically you set display to flex and both align-items and justify-content to center.</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="selector-class">.hero-image2</span> &#123;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#34495e</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">align-items</span>: center;</div><div class="line">  <span class="attribute">justify-content</span>: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.hero-text2</span> &#123;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">  <span class="attribute">color</span>: white;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-Table-Cell"><a href="#3-Table-Cell" class="headerlink" title="3. Table Cell"></a>3. Table Cell</h2><p>Table cell method is an old school way of doing this. This method was popular when web layout is organized by table, which is still popular with email templates.</p>
<p>Basically you set parent div with display table and set child display to table-cell. Also set the child with text-align center and vertical align middle.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//Table Cell</div><div class="line">.hero-image3 &#123;</div><div class="line">  background: #e74c3c;</div><div class="line">  height: 100vh;</div><div class="line">  width: 100%;</div><div class="line">  display: table;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.hero-text3 &#123;</div><div class="line">  text-align: center;</div><div class="line">  display: table-cell;</div><div class="line">  vertical-align: middle;</div><div class="line">  color: white;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-Fixed-width-element"><a href="#4-Fixed-width-element" class="headerlink" title="4. Fixed width element"></a>4. Fixed width element</h2><p>This technique will only work with fixed width element. This will also work with older browsers.</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</div><div class="line"></div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line"></div><div class="line">  <span class="attribute">margin</span>: -<span class="number">70px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">170px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><ul>
<li><a href="https://codepen.io/dannyhuang/pen/OjPNOa" target="_blank" rel="external">Codepen Demo</a></li>
<li><a href="https://css-tricks.com/centering-css-complete-guide/" target="_blank" rel="external">CSS Tricks</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h2&gt;&lt;p&gt;Centering your div blocks both horizon
    
    </summary>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS-2 ways to build parallax effect</title>
    <link href="http://yoursite.com/2017/07/24/CSS-2-ways-to-build-parallax-effect/"/>
    <id>http://yoursite.com/2017/07/24/CSS-2-ways-to-build-parallax-effect/</id>
    <published>2017-07-23T22:25:33.000Z</published>
    <updated>2017-07-27T22:37:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-is-parallax"><a href="#What-is-parallax" class="headerlink" title="What is parallax"></a>What is parallax</h2><p>Parallax is an effect where the background layer or image in this case, is moved at a different speed than the front layer while scrolling.</p>
<p>Parallax design is a popular technique in modern webdesign. There are two approaches to this effect: CSS and JS. Both are really easy. So here we go</p>
<h2 id="CSS-Approach"><a href="#CSS-Approach" class="headerlink" title="CSS Approach"></a>CSS Approach</h2><p>For your background image, you need to make the background-attachment property fixed. This will set whether the background image is fixed or scrolls with the rest of the page.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">.parallax &#123;</div><div class="line">    /* The image used */</div><div class="line">    background-image: url("img_parallax.jpg");</div><div class="line"></div><div class="line">    /* Set a specific height */</div><div class="line">    height: 500px;</div><div class="line"></div><div class="line">    /* Create the parallax scrolling effect */</div><div class="line">    background-attachment: fixed;</div><div class="line">    background-position: center;</div><div class="line">    background-repeat: no-repeat;</div><div class="line">    background-size: cover;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Container element --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parallax"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Here’s a demo of how the site will work. <a href="https://github.com/kuanhsuh/css_parallax" target="_blank" rel="external">My Github Demo</a></p>
<h1 id="JS-Approach"><a href="#JS-Approach" class="headerlink" title="JS Approach"></a>JS Approach</h1><p>In your html section add data-type and data-speed attribute. The speed will adjust the speed of how the background move.</p>
<p>Markup<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"home"</span> <span class="attr">data-type</span>=<span class="string">"background"</span> <span class="attr">data-speed</span>=<span class="string">"10"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span>I am absolute positioned<span class="tag">&lt;/<span class="name">article</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"about"</span> <span class="attr">data-type</span>=<span class="string">"background"</span> <span class="attr">data-speed</span>=<span class="string">"10"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span>Simple Parallax Scroll<span class="tag">&lt;/<span class="name">article</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#home</span> &#123;</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(home-bg.jpg) <span class="number">50%</span> <span class="number">0</span> repeat fixed; <span class="attribute">min-height</span>: <span class="number">1000px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">1000px</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">max-width</span>: <span class="number">1920px</span>;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#home</span> <span class="selector-tag">article</span> &#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">458px</span>;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">  <span class="attribute">top</span>: <span class="number">150px</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#about</span> &#123;</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(about-bg.jpg) <span class="number">50%</span> <span class="number">0</span> repeat fixed; <span class="attribute">min-height</span>: <span class="number">1000px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">1000px</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">max-width</span>: <span class="number">1920px</span>;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">50px</span> <span class="built_in">rgba</span>(0,0,0,0.8);</div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">50px</span> <span class="built_in">rgba</span>(0,0,0,0.8);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#about</span> <span class="selector-tag">article</span> &#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">458px</span>;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">  <span class="attribute">top</span>: <span class="number">150px</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'section[data-type="background"]'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> $bgobj = $(<span class="keyword">this</span>); <span class="comment">// assigning the object</span></div><div class="line"></div><div class="line">        $(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> yPos = -($<span class="built_in">window</span>.scrollTop() / $bgobj.data(<span class="string">'speed'</span>));</div><div class="line"></div><div class="line">            <span class="comment">// Put together our final background position</span></div><div class="line">            <span class="keyword">var</span> coords = <span class="string">'50% '</span>+ yPos + <span class="string">'px'</span>;</div><div class="line"></div><div class="line">            <span class="comment">// Move the background</span></div><div class="line">            $bgobj.css(&#123; <span class="attr">backgroundPosition</span>: coords &#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>The concept of this code is illusrated in this image.<br><img src="https://cdn.tutsplus.com/net/uploads/legacy/2138_SimpleParallax/images/2.jpg" alt="Alt text"></p>
<h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><ul>
<li><a href="https://github.com/kuanhsuh/css_parallax" target="_blank" rel="external">My Github Repo</a></li>
<li><a href="https://code.tutsplus.com/tutorials/a-simple-parallax-scrolling-technique--net-27641" target="_blank" rel="external">Tutsplus Parallax Technique</a></li>
<li><a href="https://www.w3schools.com/cssref/pr_background-attachment.asp" target="_blank" rel="external">w3school background attachmend</a></li>
<li><a href="https://www.w3schools.com/howto/howto_css_parallax.asp" target="_blank" rel="external">w3school parallax</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;What-is-parallax&quot;&gt;&lt;a href=&quot;#What-is-parallax&quot; class=&quot;headerlink&quot; title=&quot;What is parallax&quot;&gt;&lt;/a&gt;What is parallax&lt;/h2&gt;&lt;p&gt;Parallax is an
    
    </summary>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>NPM command cheatsheet</title>
    <link href="http://yoursite.com/2017/07/15/Node-NPM-command-cheatsheet/"/>
    <id>http://yoursite.com/2017/07/15/Node-NPM-command-cheatsheet/</id>
    <published>2017-07-15T07:38:36.000Z</published>
    <updated>2017-08-05T10:52:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Basic-Commands"><a href="#Basic-Commands" class="headerlink" title="Basic Commands"></a>Basic Commands</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">npm -v</div><div class="line">npm init <span class="comment"># create package.json &amp; add -y is yes to all requirements</span></div><div class="line">npm install <span class="comment"># install all packages in package.json</span></div><div class="line">npm install &lt;package&gt; <span class="comment"># install in package but not written in package.json</span></div><div class="line">npm install &lt;package&gt; --save-dev <span class="comment"># install in modules only in develop dependencies</span></div><div class="line">npm install &lt;package&gt;  --save <span class="comment"># install in modules in dependencies</span></div><div class="line">npm install &lt;package&gt;@&lt;version&gt; <span class="comment"># install specific version of package</span></div><div class="line"></div><div class="line">npm cache clean <span class="comment"># clear npm cache</span></div><div class="line"></div><div class="line">npm ls -g <span class="comment"># list all modules installed globally</span></div><div class="line">npm ls <span class="comment">#  list all modules locally</span></div><div class="line">npm list --depth 0 <span class="comment"># list all npm modules with depth 0</span></div><div class="line"></div><div class="line">npm show &lt;package&gt; <span class="comment"># show versions, maintainers</span></div><div class="line">npm outdated <span class="comment"># show all outdated modules</span></div><div class="line"></div><div class="line">npm prune <span class="comment">#removes "extraneous" packages. Extraneous packages are packages that are not listed on the parent package's dependencies list.</span></div></pre></td></tr></table></figure>
<h2 id="Range-Syntax"><a href="#Range-Syntax" class="headerlink" title="Range Syntax"></a>Range Syntax</h2><ol>
<li>caret (^)</li>
</ol>
<p>Allows changes that do not modify the left-most non-zero digit in the [major, minor, patch] tuple. In other words, this allows patch and minor updates for versions 1.0.0 and above, patch updates for versions 0.X &gt;=0.1.0, and no updates for versions 0.0.X.</p>
<p>“express”: “^4.15.3” means it can upgrade to version 4.99.0. Basically anything before 5.0.0</p>
<h2 id="Update-a-package"><a href="#Update-a-package" class="headerlink" title="Update a package"></a>Update a package</h2><ol>
<li><p>First find out your outdated packages by typing npm outdated</p>
</li>
<li><p>Then update the package or packages that you want manually as npm update –save package_name</p>
</li>
</ol>
<h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><ul>
<li><a href="https://github.com/npm/node-semver#ranges" target="_blank" rel="external">npm ranges</a></li>
<li><a href="https://www.youtube.com/watch?v=N0M1ATiCqvM" target="_blank" rel="external">npm prune</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Basic-Commands&quot;&gt;&lt;a href=&quot;#Basic-Commands&quot; class=&quot;headerlink&quot; title=&quot;Basic Commands&quot;&gt;&lt;/a&gt;Basic Commands&lt;/h2&gt;&lt;figure class=&quot;highlight 
    
    </summary>
    
    
      <category term="nodeJS" scheme="http://yoursite.com/tags/nodeJS/"/>
    
  </entry>
  
  <entry>
    <title>Node-Hide environemnt variables in your app</title>
    <link href="http://yoursite.com/2017/07/09/Node-Hide-environemnt-variables-in-your-app/"/>
    <id>http://yoursite.com/2017/07/09/Node-Hide-environemnt-variables-in-your-app/</id>
    <published>2017-07-08T22:13:30.000Z</published>
    <updated>2017-08-05T10:52:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This is a question that I been struggle for a long time. However, I final figure it out. There are two ways that I recommend doing this using dotenv package or setting it manually.</p>
<h2 id="dotenv-package"><a href="#dotenv-package" class="headerlink" title="dotenv package"></a>dotenv package</h2><p>Here’s my example repo: <a href="https://github.com/kuanhsuh/node_hideglobalvar_demo" target="_blank" rel="external">dotenv repo</a></p>
<ol>
<li>First install dotenv</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install dotenv --save-dev</div></pre></td></tr></table></figure>
<p>Create .env file</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ABC_KEY = <span class="number">1234</span>qwer</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// in server/index.js</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'dotenv'</span>).config()</div><div class="line"><span class="built_in">console</span>.log(process.env.ABC_KEY)</div></pre></td></tr></table></figure>
<p>Remember in your .gitignore file to ignore .env file.</p>
<img src="/2017/07/09/Node-Hide-environemnt-variables-in-your-app/hidevar3.png" alt="Screenshot 3" title="Screenshot 3">
<h2 id="Set-process-env-variable-in-terminal"><a href="#Set-process-env-variable-in-terminal" class="headerlink" title="Set process.env variable in terminal"></a>Set process.env variable in terminal</h2><p>Second way is to directly set your variable in your terminal and access it in your node.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># type this in your terminal</span></div><div class="line"><span class="built_in">export</span> ABC_KEY=1234qwer <span class="comment"># no space and no quotation</span></div><div class="line"><span class="comment"># for window replace export for set</span></div><div class="line"><span class="built_in">unset</span> ABC_KEY <span class="comment"># unset variable</span></div></pre></td></tr></table></figure>
<img src="/2017/07/09/Node-Hide-environemnt-variables-in-your-app/hidevar1.png" alt="Screenshot 1" title="Screenshot 1">
<img src="/2017/07/09/Node-Hide-environemnt-variables-in-your-app/hidevar2.png" alt="Screenshot 2" title="Screenshot 2">
<p>Now you can access the variables in your node app by using process.env.ABC_KEY</p>
<h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><ul>
<li><a href="https://www.youtube.com/watch?v=zDup0I2VGmk" target="_blank" rel="external">DevCoffee tutorial</a></li>
<li><a href="https://github.com/kuanhsuh/node_hideglobalvar_demo" target="_blank" rel="external">dotenv repo</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;This is a question that I been
    
    </summary>
    
    
      <category term="nodeJS" scheme="http://yoursite.com/tags/nodeJS/"/>
    
  </entry>
  
  <entry>
    <title>Git 202 - Squash Multiple Commits, Edit Last Commit, Git reset</title>
    <link href="http://yoursite.com/2017/07/07/Git-202-Squash-Multiple-Commits-Edit-Last-Commit-Git-reset/"/>
    <id>http://yoursite.com/2017/07/07/Git-202-Squash-Multiple-Commits-Edit-Last-Commit-Git-reset/</id>
    <published>2017-07-06T21:45:24.000Z</published>
    <updated>2017-07-08T22:11:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>Here we will go over some more advanced git scenarios.</p>
<h2 id="Squah-Multiple-Commits"><a href="#Squah-Multiple-Commits" class="headerlink" title="Squah Multiple Commits"></a>Squah Multiple Commits</h2><ol>
<li><p>Let’s say we have multiple commits and we want to squash them. We use rebase to the first commit. The rebase screen will come up.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">b1 <span class="comment"># commit 1</span></div><div class="line">b2 <span class="comment"># commit 2</span></div><div class="line">git rebase -i 49687a0a646954afdf3f4dae1f914ea793341ea2 (Commit 1 version number)</div></pre></td></tr></table></figure>
</li>
<li><p>After rebase command we enter editor interface where we can edit the commits. Basically you need to choose one to squash and choose pick for the rest of the commits.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">pick 033beb4 b1</div><div class="line">pick d426a8a b2</div><div class="line"></div><div class="line"><span class="comment"># Rebase 49687a0..d426a8a onto 49687a0</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Commands:</span></div><div class="line"><span class="comment">#  p, pick = use commit</span></div><div class="line"><span class="comment">#  r, reword = use commit, but edit the commit message</span></div><div class="line"><span class="comment">#  e, edit = use commit, but stop for amending</span></div><div class="line"><span class="comment">#  s, squash = use commit, but meld into previous commit</span></div><div class="line"><span class="comment">#  f, fixup = like "squash", but discard this commit's log message</span></div><div class="line"><span class="comment">#  x, exec = run command (the rest of the line) using shell</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># If you remove a line here THAT COMMIT WILL BE LOST.</span></div><div class="line"><span class="comment"># However, if you remove everything, the rebase will be aborted.</span></div><div class="line"><span class="comment">#</span></div></pre></td></tr></table></figure>
</li>
<li><p>Next you need to enter a new commit message</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">b</div><div class="line"><span class="comment"># This is a combination of 2 commits.</span></div><div class="line"><span class="comment"># The first commit's message is:</span></div><div class="line"><span class="comment"># b1</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># This is the 2nd commit message:</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># b2</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Please enter the commit message for your changes. Lines starting</span></div><div class="line"><span class="comment"># with '#' will be ignored, and an empty message aborts the commit.</span></div><div class="line"><span class="comment"># Not currently on any branch.</span></div><div class="line"><span class="comment"># Changes to be committed:</span></div><div class="line"><span class="comment">#   (use "git reset HEAD &lt;file&gt;..." to unstage)</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#       modified:   a.txt</span></div><div class="line"><span class="comment">#</span></div></pre></td></tr></table></figure>
</li>
<li><p>You can check git log for update</p>
</li>
</ol>
<h2 id="Edit-last-Comment"><a href="#Edit-last-Comment" class="headerlink" title="Edit last Comment"></a>Edit last Comment</h2><ol>
<li>You use the amend command. Ammend command go back to the previous commit and edit it.</li>
<li><p>Another way is revert, which creates a new commit (does not interfere previous commit) but reverts status to previous commit.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git commit --amend -m <span class="string">"New commit message"</span></div><div class="line">git revert &lt;version number&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Git-Reset"><a href="#Git-Reset" class="headerlink" title="Git Reset"></a>Git Reset</h2><p>Here are some commands when you want to return to previous commit or situation before merge.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># return to previous commit</span></div><div class="line">git reset HEAD^ --hard</div><div class="line"><span class="comment"># return to previous commit or cancel merge when enter conflict</span></div><div class="line">git reset --hard</div><div class="line"><span class="comment"># after merge return to before merge</span></div><div class="line">git reset --hard ORIG_HEAD</div></pre></td></tr></table></figure>
<h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><ul>
<li><a href="http://zerodie.github.io/blog/2012/01/19/git-rebase-i/" target="_blank" rel="external">Zerodie Github</a></li>
<li><a href="http://blog.gogojimmy.net/2012/02/29/git-scenario/" target="_blank" rel="external">gogojimmy</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Here we will go over some more advanced git scenarios.&lt;/p&gt;
&lt;h2 id=&quot;Squah-Multiple-Commits&quot;&gt;&lt;a href=&quot;#Squah-Multiple-Commits&quot; class=&quot;heade
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Git 101 - Basic Commands</title>
    <link href="http://yoursite.com/2017/07/07/Git-101-Basic-Commands/"/>
    <id>http://yoursite.com/2017/07/07/Git-101-Basic-Commands/</id>
    <published>2017-07-06T21:01:10.000Z</published>
    <updated>2017-07-08T22:10:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>Git is a version control system. It tracks the changes you make. Every team uses some kind of versioning tool. One of the biggest features of git is branches. It’s the most popular version constrol system out there and many companies uses it.</p>
<p>Before I start working I actually don’t use git or only use the basic commands. Now I started working I need to use git to upload my work and how to use git to enhance my work experience. Here are some basic commands to get started.</p>
<h2 id="Basic-Commands"><a href="#Basic-Commands" class="headerlink" title="Basic Commands"></a>Basic Commands</h2><ol>
<li><p>Basic config.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># config user</span></div><div class="line">git config --global user.name <span class="string">"Jimmy Kuo"</span></div><div class="line">git config --global user.email <span class="string">"jimmy@gogojimmy.net"</span></div><div class="line"><span class="comment"># set up git core editor</span></div><div class="line">git config --global core.editor <span class="string">"code --wait"</span></div><div class="line"><span class="comment"># checkout git config file</span></div><div class="line">cat ~/.gitconfig</div><div class="line"><span class="comment"># setup alias</span></div><div class="line">git config --global alias.st status</div><div class="line"><span class="comment">#Apply no white space warning</span></div><div class="line">git config --global apply.whitespace nowarn</div><div class="line"><span class="comment"># Add UI Color</span></div><div class="line">git config --global color.ui <span class="literal">true</span></div></pre></td></tr></table></figure>
</li>
<li><p>Remote Git Commands</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Init Project</span></div><div class="line">git init</div><div class="line"><span class="comment"># Clone project</span></div><div class="line">git <span class="built_in">clone</span> &lt;remote url&gt;</div><div class="line"><span class="comment"># Push your repo</span></div><div class="line">git push or git push origin master</div><div class="line"><span class="comment"># Pull repo update your current repo with remote repo</span></div><div class="line">git pull</div></pre></td></tr></table></figure>
</li>
<li><p>Basic Git Commands</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># check current status</span></div><div class="line">git status</div><div class="line"><span class="comment"># add certain file</span></div><div class="line">git add &lt;certain file&gt;</div><div class="line"><span class="comment"># add all files</span></div><div class="line">git add.</div><div class="line"><span class="comment"># Commit with a message</span></div><div class="line">git commit -m <span class="string">"Git init"</span></div></pre></td></tr></table></figure>
</li>
<li><p>Git Branch.</p>
<p>Branch is one of the biggest features in git. It’s cheap. Basically you create a branch when you want a new feature, fix bug, or try something new.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># create new branch named cat</span></div><div class="line">git branch cat</div><div class="line"><span class="comment"># checkout to cat branch</span></div><div class="line">git checkout cat</div><div class="line"><span class="comment"># after you finished with branch, you checkout to master first and merge</span></div><div class="line">git merge</div><div class="line"><span class="comment"># you can rebase with master and your commits with branch will be put at the end of master branch</span></div><div class="line">git rebase master</div><div class="line"><span class="comment"># check out the diff between current branch and master branch</span></div><div class="line">git diff</div><div class="line"><span class="comment"># delete branch name</span></div><div class="line">git branch <span class="_">-d</span> <span class="string">"branch name"</span></div></pre></td></tr></table></figure>
</li>
<li><p>Merge Conflict</p>
<ul>
<li>When merge conflict occurs, git should open your default editor where you can resolve conflict. (*don’t forget to delete &lt;&lt;&lt;, ===, &gt;&gt;&gt;)</li>
<li>Use git add to stage finished file.(continue until all conflicts are complete)</li>
<li>git commit -m “merge complete”</li>
</ul>
</li>
</ol>
<h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><ul>
<li><a href="http://blog.gogojimmy.net/2012/01/21/how-to-use-git-2-basic-usage-and-worflow/" target="_blank" rel="external">gogojimmy</a></li>
<li><a href="https://git-scm.com/" target="_blank" rel="external">Git-scm</a></li>
<li><a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="external">Git branching model</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h2&gt;&lt;p&gt;Git is a version control system. It tr
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Express-Custom Facebook Chatbot</title>
    <link href="http://yoursite.com/2017/06/30/Express-Custom-Facebook-Chatbot/"/>
    <id>http://yoursite.com/2017/06/30/Express-Custom-Facebook-Chatbot/</id>
    <published>2017-06-29T22:48:57.000Z</published>
    <updated>2017-08-05T10:52:00.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2017/06/30/Express-Custom-Facebook-Chatbot/chat1.jpg" alt="Response 1" title="Response 1">
<h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><p>Facebook chat can custom response such as image, video, custom buttons. It can also add pay feature how ever still in demo.</p>
<p>I have a FB page about room rental. For my chatbot, I want it to introduct some basic room types and if customer asks a too complicated question, I’ll have a generic response.</p>
<h2 id="User-Story"><a href="#User-Story" class="headerlink" title="User Story"></a>User Story</h2><ul>
<li>[ ] User should see a getting started button</li>
<li>[ ] User see a welcome message</li>
<li>[ ] User see options have room types, price, features</li>
<li>[ ] User should see a generic phone number and message for complicated response</li>
</ul>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><ol>
<li><p>Change default message response</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">app.post(<span class="string">'/webhook/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  ...</div><div class="line">    if (event.postback &amp;&amp; event.postback.payload === <span class="string">"getstarted"</span>) &#123;</div><div class="line">      sendText(sender, <span class="string">"歡迎來到高醫套房， 請問你想了解什麼？房型？價錢？特色"</span>)</div><div class="line">      <span class="comment">// welcome, what would you like to know? room types, price, features</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (event.message &amp;&amp; event.message.text) &#123;</div><div class="line">      <span class="keyword">let</span> text = event.message.text</div><div class="line">      decideMessage(sender, text)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  res.sendStatus(<span class="number">200</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>Direct mapping for specific keyword</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">decideMessage</span>(<span class="params">sender, text</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (text.includes(<span class="string">"房型"</span>)) &#123; <span class="comment">// Room Types</span></div><div class="line">    sendText(sender, <span class="string">"我們這裡有一間5坪房間， 6間6坪房間， 2間7坪房間"</span>) <span class="comment">// We have 15sq, 25 sq, 35sq room</span></div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( text.includes(<span class="string">"價錢"</span>)) &#123; <span class="comment">//Price</span></div><div class="line">    sendText(sender, <span class="string">"長期約: 1年合約: 每月5500-6800$，2個月押金"</span>)</div><div class="line">    <span class="comment">// contract term is 1 year, monthly rent is 5500-6600, 2 months deposit</span></div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (text.includes(<span class="string">"特色"</span>)) &#123; <span class="comment">// Feature</span></div><div class="line">    sendText(sender, <span class="string">"獨立廁所，雙人床，桌子椅子，電視，冰箱，冷氣，烘洗衣機"</span>)</div><div class="line">    <span class="comment">//bathroom, queen size bed, tv, fridge, ac....</span></div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    sendText(sender, <span class="string">"如果有更多問題, 請打給 0800-123-333。 會有專人幫你服務"</span>)</div><div class="line">    <span class="comment">// if you have further question, please call...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Setup welcome message</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'/setup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">  setupGetStartedButton(res);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setupGetStartedButton</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> messageData = &#123;</div><div class="line">    <span class="string">"get_started"</span>:&#123;</div><div class="line">        <span class="string">"payload"</span>:<span class="string">"getstarted"</span></div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">  <span class="comment">// Start the request</span></div><div class="line">  request(&#123;</div><div class="line">      <span class="attr">url</span>: <span class="string">"https://graph.facebook.com/v2.6/me/messenger_profile?access_token="</span>+ token,</div><div class="line">      <span class="attr">method</span>: <span class="string">'POST'</span>,</div><div class="line">      <span class="attr">headers</span>: &#123;<span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>&#125;,</div><div class="line">      <span class="attr">form</span>: messageData</div><div class="line">  &#125;,</div><div class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">error, response, body</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (!error &amp;&amp; response.statusCode == <span class="number">200</span>) &#123;</div><div class="line">          <span class="comment">// Print out the response body</span></div><div class="line">          res.send(body);</div><div class="line"></div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="comment">// <span class="doctag">TODO:</span> Handle errors</span></div><div class="line">          res.send(body);</div><div class="line">      &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="More-pictures"><a href="#More-pictures" class="headerlink" title="More pictures"></a>More pictures</h2><img src="/2017/06/30/Express-Custom-Facebook-Chatbot/chat2.jpg" alt="Response 2" title="Response 2">
<img src="/2017/06/30/Express-Custom-Facebook-Chatbot/chat3.jpg" alt="Response 3" title="Response 3">
<h2 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h2><p>Facebook chatbot is still a new technology. Even more advanced chatbot such as cnn only maps user to news. I think the future is to have implement with a AI so chatbot can be more lively.</p>
<h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><ul>
<li><a href="https://github.com/kuanhsuh/express-fbChatBot/blob/master/index.js" target="_blank" rel="external">My Github Repo(basic)</a></li>
<li><a href="https://www.techiediaries.com/build-messenger-bot-nodejs/" target="_blank" rel="external">Technie Diaries - build messenger bot</a></li>
<li><a href="https://developers.facebook.com/docs/messenger-platform/thread-settings/greeting-text" target="_blank" rel="external">Facebook Greeting Text</a></li>
<li><a href="https://developers.facebook.com/docs/messenger-platform/messenger-profile/get-started-button" target="_blank" rel="external">Facebook - Getting Started Button</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2017/06/30/Express-Custom-Facebook-Chatbot/chat1.jpg&quot; alt=&quot;Response 1&quot; title=&quot;Response 1&quot;&gt;
&lt;h2 id=&quot;Features&quot;&gt;&lt;a href=&quot;#Features&quot; 
    
    </summary>
    
    
      <category term="expressJS" scheme="http://yoursite.com/tags/expressJS/"/>
    
      <category term="nodeJS" scheme="http://yoursite.com/tags/nodeJS/"/>
    
  </entry>
  
  <entry>
    <title>Express-Basic Facebook Chatbot</title>
    <link href="http://yoursite.com/2017/06/30/Express-Facebook-Chatbot/"/>
    <id>http://yoursite.com/2017/06/30/Express-Facebook-Chatbot/</id>
    <published>2017-06-29T21:24:17.000Z</published>
    <updated>2017-07-02T21:27:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://scontent-tpe1-1.xx.fbcdn.net/v/t39.2178-6/13331537_288414224831849_853132949_n.png?oh=1e98ecca3eeeddbafd654a7b08c42826&amp;oe=59CEF51B" alt="Sample Response" title="Sample"></p>
<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>Facebook chatbot is a chatbot service that user can use to their own facebook pages. You can use chatbot to answer basic user questions and direct them to their desire products. However, it can not have a deep conversation with user. (You will need to use a Artificial Intelligence API or something for this)</p>
<p>For this post I’ll show how to setup your chat app. It will connect to your facebook page and just respond what user types. In the next post I’ll show how to customize your facebook response.</p>
<h2 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h2><p>The code is in my github repo (LINK)</p>
<ol>
<li><p>Install following packages</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">"body-parser"</span>: <span class="string">"^1.17.2"</span>,</div><div class="line"><span class="string">"express"</span>: <span class="string">"^4.15.3"</span>,</div><div class="line"><span class="string">"request"</span>: <span class="string">"^2.81.0"</span></div></pre></td></tr></table></figure>
</li>
<li><p>Basic App setup</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</div><div class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</div><div class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> app = express()</div><div class="line"></div><div class="line">app.set(<span class="string">'port'</span>, (process.env.PORT || <span class="number">8000</span>))</div><div class="line"></div><div class="line"><span class="comment">// Allow us to process the data</span></div><div class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;))</div><div class="line">app.use(bodyParser.json())</div></pre></td></tr></table></figure>
</li>
<li><p>Basic Routes Setup</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ROUTES</span></div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.send(<span class="string">"Hi, I am a chatbot"</span>)</div><div class="line">&#125;)</div><div class="line"><span class="comment">// FACEBOOK (security thing)</span></div><div class="line">app.get(<span class="string">'/webhook/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="comment">// hub?</span></div><div class="line">  <span class="keyword">if</span> (req.query[<span class="string">'hub.verify_token'</span>] === <span class="string">"dannyisexy"</span>) &#123;</div><div class="line">    res.send(req.query[<span class="string">'hub.challenge'</span>])</div><div class="line">  &#125;</div><div class="line">  res.send(<span class="string">"Wrong token"</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>POST response for webhook. After user enter a message. It is sent to our webhook. We use body-parser to parse messages.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">app.post(<span class="string">'/webhook/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> messaging_events = req.body.entry[<span class="number">0</span>].messaging  <span class="comment">// Parse Messages from fb API the response look like the object below</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; messaging_events.length; i++)&#123;</div><div class="line">    <span class="keyword">let</span> event = messaging_events[i]</div><div class="line">    <span class="keyword">let</span> sender = event.sender.id <span class="comment">// get User ID, so we know who to send response to</span></div><div class="line">    <span class="keyword">if</span> (event.message &amp;&amp; event.message.text) &#123;</div><div class="line">      <span class="keyword">let</span> text = event.message.text <span class="comment">// get user text</span></div><div class="line">      sendText(sender, <span class="string">"Text echo: "</span>+ text.substring(<span class="number">0</span>,<span class="number">100</span>)) <span class="comment">// respond the same text as user</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  res.sendStatus(<span class="number">200</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>This is what facebook send to our webhook.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="string">"object"</span>:<span class="string">"page"</span>,</div><div class="line"><span class="string">"entry"</span>:[</div><div class="line">  &#123;</div><div class="line">    <span class="string">"id"</span>:<span class="string">"PAGE_ID"</span>,</div><div class="line">    <span class="string">"time"</span>:<span class="number">1458692752478</span>,</div><div class="line">    <span class="string">"messaging"</span>:[</div><div class="line">      &#123;</div><div class="line">        <span class="string">"sender"</span>:&#123;</div><div class="line">          <span class="string">"id"</span>:<span class="string">"USER_ID"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">"recipient"</span>:&#123;</div><div class="line">          <span class="string">"id"</span>:<span class="string">"PAGE_ID"</span></div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        ...</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Functions for sending response text. We use the request module from npm to send our response.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendText</span>(<span class="params">sender, text</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> messageData = &#123;<span class="attr">text</span>: text&#125;</div><div class="line">  sendRequest(sender, messageData)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendRequest</span>(<span class="params">sender, messageData</span>) </span>&#123;</div><div class="line">  request(&#123;</div><div class="line">    <span class="attr">url</span>: <span class="string">"https://graph.facebook.com/v2.6/me/messages"</span>,</div><div class="line">    <span class="attr">qs</span>: &#123; <span class="attr">access_token</span>: token &#125;,</div><div class="line">    <span class="attr">method</span>: <span class="string">"POST"</span>,</div><div class="line">    <span class="attr">json</span>: &#123;</div><div class="line">      <span class="attr">recipient</span>: &#123;<span class="attr">id</span>: sender&#125;,</div><div class="line">      <span class="attr">message</span>: messageData</div><div class="line">    &#125;</div><div class="line">  &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error, response, body</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (error)&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"sending error"</span>)</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (response.body.error)&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"response body error"</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">app.listen(app.get(<span class="string">'port'</span>), <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'running: port'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>Here’s what our facebook’s send API ask for</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">curl -X POST -H "Content-Type: application/json" -d '&#123;</div><div class="line">  "recipient": &#123;</div><div class="line">    "id": "USER_ID"</div><div class="line">  &#125;,</div><div class="line">  "message": &#123;</div><div class="line">    "text": "hello, world!"</div><div class="line">  &#125;</div><div class="line">&#125;' "https://graph.facebook.com/v2.6/me/messages?access_token=PAGE_ACCESS_TOKEN"</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h2><p>We setup our server that accepts webhook.<br>Our webhook is able to deal with response and able to return a message back to user.<br>This is how to send basic text response to user. Next blog post i’ll show you how to customer your response.</p>
<h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><ul>
<li><a href="https://github.com/kuanhsuh/express-fbChatBot/blob/master/basic.js" target="_blank" rel="external">My Github Repo(basic)</a></li>
<li><a href="https://developers.facebook.com/docs/messenger-platform/guides/quick-start" target="_blank" rel="external">Facebook Quick Start Guide</a></li>
<li><a href="https://developers.facebook.com/docs/messenger-platform/webhook-reference" target="_blank" rel="external">Facebook webhook reference</a></li>
<li><a href="https://developers.facebook.com/docs/messenger-platform/send-api-reference" target="_blank" rel="external">Facebook Send API</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://scontent-tpe1-1.xx.fbcdn.net/v/t39.2178-6/13331537_288414224831849_853132949_n.png?oh=1e98ecca3eeeddbafd654a7b08c42826&amp;
    
    </summary>
    
    
      <category term="expressJS" scheme="http://yoursite.com/tags/expressJS/"/>
    
      <category term="nodeJS" scheme="http://yoursite.com/tags/nodeJS/"/>
    
  </entry>
  
  <entry>
    <title>Express-Intro to Passport.js part II</title>
    <link href="http://yoursite.com/2017/06/23/Express-Intro-to-Passport-js-part-II/"/>
    <id>http://yoursite.com/2017/06/23/Express-Intro-to-Passport-js-part-II/</id>
    <published>2017-06-23T08:44:19.000Z</published>
    <updated>2017-06-23T09:01:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is the second part on my Passport tutorial. Please read first part if you haven’t.</p>
<ol>
<li><p>Import session, express-validator, connect flash into app.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>);</div><div class="line"><span class="keyword">var</span> flash = <span class="built_in">require</span>(<span class="string">'connect-flash'</span>);</div><div class="line"><span class="keyword">var</span> expressValidator = <span class="built_in">require</span>(<span class="string">'express-validator'</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Express Session</span></div><div class="line">app.use(session(&#123;</div><div class="line">    <span class="attr">secret</span>: <span class="string">'secret'</span>,</div><div class="line">    <span class="attr">saveUninitialized</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">resave</span>: <span class="literal">true</span></div><div class="line">&#125;));</div><div class="line"></div><div class="line"><span class="comment">// Express Validator</span></div><div class="line">app.use(expressValidator(&#123;</div><div class="line">  <span class="attr">errorFormatter</span>: <span class="function"><span class="keyword">function</span>(<span class="params">param, msg, value</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> namespace = param.split(<span class="string">'.'</span>)</div><div class="line">      , root    = namespace.shift()</div><div class="line">      , formParam = root;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(namespace.length) &#123;</div><div class="line">      formParam += <span class="string">'['</span> + namespace.shift() + <span class="string">']'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">param</span> : formParam,</div><div class="line">      <span class="attr">msg</span>   : msg,</div><div class="line">      <span class="attr">value</span> : value</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;));</div><div class="line"></div><div class="line"><span class="comment">// Connect Flash</span></div><div class="line">app.use(flash());</div><div class="line"></div><div class="line"><span class="comment">// setup local variables so we can use it anywhere in our app</span></div><div class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  res.locals.success_msg = req.flash(<span class="string">'success_msg'</span>);</div><div class="line">  res.locals.error_msg = req.flash(<span class="string">'error_msg'</span>);</div><div class="line">  res.locals.error = req.flash(<span class="string">'error'</span>);</div><div class="line">  res.locals.user = req.user || <span class="literal">null</span>;</div><div class="line">  next();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>Add flash and validation into routes/users.js</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// REVISED with validation feature. Post Sign Up</span></div><div class="line">router.post(<span class="string">'/signup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  <span class="comment">// Parse Info</span></div><div class="line">  <span class="keyword">var</span> username = req.body.username</div><div class="line">  <span class="keyword">var</span> password = req.body.password</div><div class="line"></div><div class="line">  <span class="comment">// Validation</span></div><div class="line">  req.checkBody(<span class="string">'username'</span>, <span class="string">'Username is required'</span>).notEmpty()</div><div class="line">  req.checkBody(<span class="string">'password'</span>, <span class="string">'Password is required'</span>).notEmpty()</div><div class="line"></div><div class="line">  <span class="keyword">var</span> errors = req.validationErrors();</div><div class="line">  <span class="keyword">if</span>(errors) &#123;</div><div class="line">    res.render(<span class="string">'signup'</span>, &#123;<span class="attr">errors</span>: errors&#125;)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="comment">//Create User</span></div><div class="line">  ...</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  router.get(<span class="string">'/logout'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  ...</div><div class="line">  req.flash(<span class="string">'success_msg'</span>, <span class="string">'You are logged out'</span>)</div><div class="line">  ...</div><div class="line">&#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ol>
<li><p>Implement the flash message to sign in &amp; sign up views.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//signin.ejs</span></div><div class="line">&lt;% <span class="keyword">if</span>(success_msg) &#123; %&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"success"</span>&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">%=</span> <span class="attr">success_msg</span> %&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">&lt;% &#125; %&gt;</div><div class="line"></div><div class="line"><span class="comment">//signup.ejs</span></div><div class="line">&lt;% <span class="keyword">if</span>(errors)&#123; %&gt;</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">%</span> <span class="attr">errors.forEach</span>(<span class="attr">function</span>(<span class="attr">error</span>)&#123; %&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">error.msg</span> %&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">%</span> &#125;) %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>This is it on how to implement passportJS to your express app. A lot of code is the same from the library’s document. I recommend you going to each individual library and read their docs. This post is to show you on how to implement them together.</p>
<h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><ul>
<li><a href="https://github.com/jaredhanson/connect-flash" target="_blank" rel="external">connect-flash</a></li>
<li><a href="https://github.com/ctavan/express-validator" target="_blank" rel="external">express-validator</a></li>
<li><a href="https://github.com/expressjs/session" target="_blank" rel="external">express-session</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the second part on my Passport tutorial. Please read first part if you haven’t.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Import session, express-validator
    
    </summary>
    
    
      <category term="expressJS" scheme="http://yoursite.com/tags/expressJS/"/>
    
      <category term="nodeJS" scheme="http://yoursite.com/tags/nodeJS/"/>
    
  </entry>
  
  <entry>
    <title>Express-Intro to Passport.js part I</title>
    <link href="http://yoursite.com/2017/06/21/Express-Intro-to-Passport-js/"/>
    <id>http://yoursite.com/2017/06/21/Express-Intro-to-Passport-js/</id>
    <published>2017-06-21T06:07:14.000Z</published>
    <updated>2017-06-23T08:44:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>Passport is a user authentication library for node. It provides tons of strategies (facebook, google, etc). I’ll be going over the basic passport-local strategy which you sign up with username and passpord. User login with valid name and password.</p>
<p>I’ll also show to how to use session and flash to display error or success message. Also, use express validator to validate user input. Finally encrypt user password with the mighty bcryptjs.</p>
<h3 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h3><ol>
<li><p>Install Packages. (bcryptJS, express-validator, passport, psasport-local, etc) You can refer to package.json</p>
</li>
<li><p>Setup User Model with some functions</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// routes/users.js</span></div><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</div><div class="line"><span class="keyword">var</span> bcrypt = <span class="built_in">require</span>(<span class="string">'bcryptjs'</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> UserSchema = mongoose.Schema(&#123;</div><div class="line">  <span class="attr">username</span>: &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">index</span>: <span class="literal">true</span>&#125;,</div><div class="line">  <span class="attr">password</span>: &#123; <span class="attr">type</span>: <span class="built_in">String</span>&#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">var</span> User = <span class="built_in">module</span>.exports = mongoose.model(<span class="string">'User'</span>, UserSchema)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports.createUser = <span class="function"><span class="keyword">function</span>(<span class="params">newUser, callback</span>) </span>&#123;</div><div class="line">  bcrypt.genSalt(<span class="number">10</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, salt</span>) </span>&#123;</div><div class="line">    bcrypt.hash(newUser.password, salt, <span class="function"><span class="keyword">function</span>(<span class="params">err, hash</span>)</span>&#123;</div><div class="line">      newUser.password = hash</div><div class="line">      newUser.save(callback)</div><div class="line">    &#125;)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports.getUserByUsername = <span class="function"><span class="keyword">function</span>(<span class="params">username, callback</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> query = &#123; <span class="attr">username</span>: username &#125;</div><div class="line">  User.findOne(query, callback)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports.getUserById = <span class="function"><span class="keyword">function</span>(<span class="params">id, callback</span>) </span>&#123;</div><div class="line">  User.findById(id, callback)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports.comparePassword = <span class="function"><span class="keyword">function</span>(<span class="params">candidatePassword, hash,callback</span>) </span>&#123;</div><div class="line">  bcrypt.compare(candidatePassword, hash, <span class="function"><span class="keyword">function</span>(<span class="params">err, isMatch</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err</div><div class="line">    callback(<span class="literal">null</span>, isMatch)</div><div class="line">&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Setup mongoDB and passportJS in app.js ( I’m only going over the main imports the basic imports such as express please refer to my github, link below)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> passport = <span class="built_in">require</span>(<span class="string">'passport'</span>)</div><div class="line"><span class="keyword">var</span> LocalStrategy = <span class="built_in">require</span>(<span class="string">'passport-local'</span>)</div><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</div><div class="line"><span class="keyword">var</span> flash = <span class="built_in">require</span>(<span class="string">'connect-flash'</span>);</div><div class="line"><span class="keyword">var</span> users = <span class="built_in">require</span>(<span class="string">'./routes/users'</span>);</div><div class="line"></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">mongoose.connect(<span class="string">'mongodb://localhost/loginappv2'</span>);</div><div class="line"><span class="keyword">var</span> db = mongoose.connection;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">app.use(passport.initialize());</div><div class="line">app.use(passport.session());</div></pre></td></tr></table></figure>
</li>
<li><p>set up routes in routes/user.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* GET users listing. */</span></div><div class="line">router.get(<span class="string">'/signin'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(res.locals)</div><div class="line">  res.render(<span class="string">'signin'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">router.post(<span class="string">'/signin'</span>,</div><div class="line">  passport.authenticate(<span class="string">'local'</span>, &#123;</div><div class="line">    <span class="attr">successRedirect</span>: <span class="string">'/users/profile'</span>,</div><div class="line">    <span class="attr">failureRedirect</span>: <span class="string">'/users/signin'</span>,</div><div class="line">    <span class="attr">failureFlash</span>: <span class="literal">true</span></div><div class="line">  &#125;),</div><div class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.redirect(<span class="string">'/users/profile'</span>)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/* GET users listing. */</span></div><div class="line">router.get(<span class="string">'/signup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  res.render(<span class="string">'signup'</span>, &#123;<span class="attr">errors</span>: <span class="string">''</span>&#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Post Sign Up</span></div><div class="line">router.post(<span class="string">'/signup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  <span class="comment">// Parse Info</span></div><div class="line">  <span class="keyword">var</span> username = req.body.username</div><div class="line">  <span class="keyword">var</span> password = req.body.password</div><div class="line"></div><div class="line">  <span class="comment">//Create User</span></div><div class="line">  <span class="keyword">var</span> newUser = <span class="keyword">new</span> User(&#123;</div><div class="line">    <span class="attr">username</span>: username,</div><div class="line">    <span class="attr">password</span>: password</div><div class="line">  &#125;)</div><div class="line">  User.createUser(newUser, <span class="function"><span class="keyword">function</span>(<span class="params">err, user</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</div><div class="line">  &#125;)</div><div class="line">  res.redirect(<span class="string">'/users/signin'</span>)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">router.get(<span class="string">'/profile'</span>, ensureAuthenticated, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(req.user)</div><div class="line">  res.render(<span class="string">'profile'</span>, &#123;</div><div class="line">    <span class="attr">user</span>: req.user.username</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">router.get(<span class="string">'/logout'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  req.logout()</div><div class="line">  req.flash(<span class="string">'success_msg'</span>, <span class="string">'You are logged out'</span>)</div><div class="line">  res.redirect(<span class="string">'/users/signin'</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = router;</div></pre></td></tr></table></figure>
</li>
<li><p>setup passport and local in routes/user.js</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// routes/users.js</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ensureAuthenticated</span>(<span class="params">req, res, next</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(req.isAuthenticated())&#123;</div><div class="line">    <span class="keyword">return</span> next();</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    req.flash(<span class="string">'error_msg'</span>, <span class="string">'you are not logged in'</span>)</div><div class="line">    res.redirect(<span class="string">'/users/signin'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">passport.use(<span class="keyword">new</span> LocalStrategy(</div><div class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">username, password, done</span>) </span>&#123;</div><div class="line">    User.findOne(&#123; <span class="attr">username</span>: username &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, user</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (err) &#123; <span class="keyword">return</span> done(err); &#125;</div><div class="line">      <span class="keyword">if</span> (!user) &#123;</div><div class="line">        <span class="keyword">return</span> done(<span class="literal">null</span>, <span class="literal">false</span>, &#123; <span class="attr">message</span>: <span class="string">'Incorrect username.'</span> &#125;);</div><div class="line">      &#125;</div><div class="line">      User.comparePassword(password, user.password, <span class="function"><span class="keyword">function</span>(<span class="params">err, isMatch</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(err) <span class="keyword">throw</span> err</div><div class="line">        <span class="keyword">if</span>(isMatch) &#123;</div><div class="line">          <span class="keyword">return</span> done(<span class="literal">null</span>, user)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="keyword">return</span> done(<span class="literal">null</span>, <span class="literal">false</span>, &#123;<span class="attr">message</span>: <span class="string">'Invalid password'</span>&#125;)</div><div class="line">        &#125;</div><div class="line">      &#125;)</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">));</div><div class="line"></div><div class="line">passport.serializeUser(<span class="function"><span class="keyword">function</span>(<span class="params">user, done</span>) </span>&#123;</div><div class="line">  done(<span class="literal">null</span>, user.id);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">passport.deserializeUser(<span class="function"><span class="keyword">function</span>(<span class="params">id, done</span>) </span>&#123;</div><div class="line">  User.getUserById(id, <span class="function"><span class="keyword">function</span>(<span class="params">err, user</span>) </span>&#123;</div><div class="line">    done(err, user);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>This is part one. I’ll implement flash, session and express validator in next part.</p>
<h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><ul>
<li><p><a href="https://github.com/kuanhsuh/express-passportJS/blob/master/routes/users.js" target="_blank" rel="external">My Github Demo</a></p>
</li>
<li><p><a href="http://passportjs.org/" target="_blank" rel="external">PassportJS</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h2&gt;&lt;p&gt;Passport is a user authentication libr
    
    </summary>
    
    
      <category term="expressJS" scheme="http://yoursite.com/tags/expressJS/"/>
    
      <category term="nodeJS" scheme="http://yoursite.com/tags/nodeJS/"/>
    
  </entry>
  
  <entry>
    <title>Book Review - The Little Book of Common Sense Investing</title>
    <link href="http://yoursite.com/2017/06/21/Book%20Review-The-little-book-of-common-sense-investing/"/>
    <id>http://yoursite.com/2017/06/21/Book Review-The-little-book-of-common-sense-investing/</id>
    <published>2017-06-21T06:03:57.000Z</published>
    <updated>2017-06-29T21:25:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://images.gr-assets.com/books/1347673616l/171127.jpg" alt="The Little Book of Common Sense Investing: The Only Way to Guarantee Your Fair Share of Stock Market Returns" title="The Little Book of Common Sense Investing: The Only Way to Guarantee Your Fair Share of Stock Market Returns"></p>
<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>John Bogle, the founder of The Vanguard Group, preaches the idea of index investing. His company Vanguard Group also is one of the leaders in index funds. In his book he talks about why index fund is the best and safest strategy for average investors.</p>
<h2 id="Index-Fund-vs-Mutal-Fund"><a href="#Index-Fund-vs-Mutal-Fund" class="headerlink" title="Index Fund vs Mutal Fund"></a>Index Fund vs Mutal Fund</h2><p>John compares stock market to fable story, the Gotrocks family (link below). He explains how fund managers and wall street turn investing from a winning game to a losing game.</p>
<p>Mutual fund is a loser’s game because of 3 reasons: transation cost, tax and management fees. Mutual fund has turnover ratio, which means the amount of stocks they buy and sell over a year. The turnover rate will generate higher transaction cost which eventually lowers your returns.</p>
<p>Also most mutual fund charges a management fee from 1-3%. This may look small but actually eats up majority of your profit. For example, S&amp;P500 returns about 10% annually, which means the management fee takes 10-30% of your profit. If you do this annually, this fee will cost you a lot.</p>
<p>Lastly, there’s the tax, US government tax when a transaction is finish. This hurts the most for short term investors.</p>
<h2 id="Asset-Allocation"><a href="#Asset-Allocation" class="headerlink" title="Asset Allocation"></a>Asset Allocation</h2><p>There’s no definate answer on this, but basically the book suggest buying a well diverse index fund(S&amp;P500, Total Market Fund) and a bond fund(total bond fund). The suggest the portion should base on your age. For example if you are 30, then you should have 30% in bonds and 70% in stocks.</p>
<h2 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h2><p>In summary this book can be summarize in that longterm investing in equities market is a winner’s game and don’t get other people take your profit from you. There’s two times where there’s a race between index fund and mutual fund, one in 1993 hosted by NY Times and 2007 when Warren Buffet challenged Wall Street hedge fund for 10 year challenge. You can check both the story below. Basically in both index fund destroyed active managed fund by a large margin. In fact the 1993 race was stopped in 1999 because the spread was just too humiliating for active mutual funds.</p>
<h3 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h3><ul>
<li><a href="http://johncbogle.com/wordpress/wp-content/uploads/2007/03/chapter%20one.pdf" target="_blank" rel="external">John Bogle Parable story</a></li>
<li><a href="https://www.amazon.com/Soft-Skills-software-developers-manual/dp/1617292397" target="_blank" rel="external">Warren Buffet Hedge Fund Bet</a></li>
<li><a href="http://www.nytimes.com/1999/07/04/business/mutual-funds-report-in-this-race-3-of-the-5-runners-left-a-benchmark-in-the-dust.html" target="_blank" rel="external">1993 NY Times Index Fund Race</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://images.gr-assets.com/books/1347673616l/171127.jpg&quot; alt=&quot;The Little Book of Common Sense Investing: The Only Way to Guara
    
    </summary>
    
    
      <category term="Book Review" scheme="http://yoursite.com/tags/Book-Review/"/>
    
  </entry>
  
  <entry>
    <title>Book Review - Millionaire Teacher</title>
    <link href="http://yoursite.com/2017/06/21/Book-Review-Millionaire-Teacher/"/>
    <id>http://yoursite.com/2017/06/21/Book-Review-Millionaire-Teacher/</id>
    <published>2017-06-21T06:02:56.000Z</published>
    <updated>2017-06-23T02:53:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://andrewhallam.com/wp-content/uploads/2016/12/millionaire-teacher-book-2ed_300x450.jpg" alt="https://andrewhallam.com/wp-content/uploads/2016/12/millionaire-teacher-book-2ed_300x450.jpg" title="Millionaire Teacher"></p>
<h2 id="Background-on-author"><a href="#Background-on-author" class="headerlink" title="Background on author"></a>Background on author</h2><p>Andrew is an English teacher from Cananda currently teaching in Singapore. Andrew is also a middle class person. He started learning investing when he was 19. He learned from a mechanic who was also a millionaire. His investing strategy is very simple and buys stocks only when stock market drops. In his book he explains a lot of misconceptions on investing and how average investors can beat wall street.</p>
<h2 id="Investing-strategies"><a href="#Investing-strategies" class="headerlink" title="Investing strategies"></a>Investing strategies</h2><ol>
<li><p>Savings is important.</p>
<p>Before investing you need to be financially responsible. For example, if you have credit card debt (which charge 17% interest) you should pay down your debt before you go into investing.</p>
</li>
<li><p>Responsible Spending.</p>
<p>Determine what’s need and what’s want. 87% of first generation millionaire only spend 31K on buy a car, which means majority of rich people don’t buy luxury cars. Another example is Warren Buffet, he drove his 30 years old Lincoln Town Car until 2006. The Millionaire Next Door(another book)also documents the fact that most millionaires drive older or used automobiles.</p>
</li>
<li><p>Stop timing the market.</p>
<p>We often hear people say the key to be successfull in stock market is to buy low and sell high. However, this book argues otherwise. For example let’s say Dow Jones was trading about 400 and drop below 100, which is about 70%. However Dow is trading at 800 in 1980, 2400 in 1990, 10220 in 2000 and 20000 in 2017(this doesn’t include dividends).</p>
<p>Over the long run and if you use dollar cost average you will your share of return.</p>
</li>
<li><p>Index Fund vs Mutual Fund</p>
<p>The book argues to buy index fund over mutual fund that are managed by people. The reason is because lower cost, transaction fee, and tax. (I’ll explain more in the other blog post). Basically market return is the maximum return for all investor. It’s simple math.</p>
</li>
</ol>
<h2 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h2><p>This book opens my mind on investing. Currently, I only invest S&amp;P500 index fund, but I plan on moving a bond index into my portfolio soon. I started investing in S&amp;P500 when it was around 1900 back in 2015. I remember it was the highest at the time. Now S&amp;P is trading at 2400 (2017). So what Andrew says make sense, long term investing in equties market is a winner’s game.</p>
<h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><ul>
<li><a href="https://www.amazon.com/Millionaire-Teacher-Wealth-Should-Learned/dp/1119356296/ref=sr_1_1?ie=UTF8&amp;qid=1498170264&amp;sr=8-1&amp;keywords=millionaire+teacher" target="_blank" rel="external">Amazon Link</a></li>
<li><a href="https://andrewhallam.com/about/" target="_blank" rel="external">Andrew’s blog</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://andrewhallam.com/wp-content/uploads/2016/12/millionaire-teacher-book-2ed_300x450.jpg&quot; alt=&quot;https://andrewhallam.com/wp-
    
    </summary>
    
    
      <category term="Book Review" scheme="http://yoursite.com/tags/Book-Review/"/>
    
  </entry>
  
  <entry>
    <title>Stripejs on express part I</title>
    <link href="http://yoursite.com/2017/06/19/Express-Stripejs-on-express-part-I/"/>
    <id>http://yoursite.com/2017/06/19/Express-Stripejs-on-express-part-I/</id>
    <published>2017-06-19T02:32:46.000Z</published>
    <updated>2017-06-19T03:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>Integrating Stripe to your app can be separated into two parts, frontend validation and submitting orders through backend server</p>
<p>I”ll be going over frontend validation in this post. This process is to validate to see if your credit card is valid. This is a complex alogoritm luckily stripe has provided this for us.</p>
<ol>
<li><p>First We need to create Stripe Client and create instance of elements</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> stripe = Stripe(<span class="string">'pk_test_KOdpJMtqiqwsnwz6D0XXXXX'</span>); <span class="comment">// You test api keys</span></div><div class="line"><span class="keyword">var</span> elements = stripe.elements();</div></pre></td></tr></table></figure>
</li>
<li><p>Your payment form must have an id of ‘payment-form’</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/charge"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">id</span>=<span class="string">"payment-form"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-row"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"card-element"</span>&gt;</span></div><div class="line">      Credit or debit card</div><div class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"card-element"</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- a Stripe Element will be inserted here. --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- Used to display Element errors --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"card-errors"</span> <span class="attr">role</span>=<span class="string">"alert"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>Submit Payment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>Custom styling can be passed to options when creating an Element.</p>
</li>
<li><p>Create an instance of the card Element</p>
</li>
<li><p>Add an instance of the card Element into the <code>card-element</code> div</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Custom styling can be passed to options when creating an Element.</span></div><div class="line"><span class="keyword">var</span> style = &#123;</div><div class="line">  <span class="attr">base</span>: &#123;</div><div class="line">    <span class="comment">// Add your base input styles here. For example:</span></div><div class="line">    fontSize: <span class="string">'16px'</span>,</div><div class="line">    <span class="attr">lineHeight</span>: <span class="string">'24px'</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Create an instance of the card Element</span></div><div class="line"><span class="keyword">var</span> card = elements.create(<span class="string">'card'</span>, &#123;<span class="attr">style</span>: style&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Add an instance of the card Element into the `card-element` &lt;div&gt;</span></div><div class="line">card.mount(<span class="string">'#card-element'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>Handle real-time validation errors from the card Element</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">card.addEventListener(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> displayError = <span class="built_in">document</span>.getElementById(<span class="string">'card-errors'</span>);</div><div class="line">  <span class="keyword">if</span> (event.error) &#123;</div><div class="line">    displayError.textContent = event.error.message;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    displayError.textContent = <span class="string">''</span>;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>Handle form submission - When form is submitted, stripe will create token.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Handle form submission</span></div><div class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">'payment-form'</span>);</div><div class="line">form.addEventListener(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">  event.preventDefault();</div><div class="line"></div><div class="line">  stripe.createToken(card).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (result.error) &#123;</div><div class="line">      <span class="comment">// Inform the user if there was an error</span></div><div class="line">      <span class="keyword">var</span> errorElement = <span class="built_in">document</span>.getElementById(<span class="string">'card-errors'</span>);</div><div class="line">      errorElement.textContent = result.error.message;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// Send the token to your server</span></div><div class="line">      stripeTokenHandler(result.token);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>Create token - this will create an hidden input field with the stripe token, which will be used in the server backend</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">stripeTokenHandler</span>(<span class="params">token</span>) </span>&#123;</div><div class="line">  <span class="comment">// Insert the token ID into the form so it gets submitted to the server</span></div><div class="line">  <span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">'payment-form'</span>);</div><div class="line">  <span class="keyword">var</span> hiddenInput = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</div><div class="line">  hiddenInput.setAttribute(<span class="string">'type'</span>, <span class="string">'hidden'</span>);</div><div class="line">  hiddenInput.setAttribute(<span class="string">'name'</span>, <span class="string">'stripeToken'</span>);</div><div class="line">  hiddenInput.setAttribute(<span class="string">'value'</span>, token.id);</div><div class="line">  form.appendChild(hiddenInput);</div><div class="line"></div><div class="line">  <span class="comment">// Submit the form</span></div><div class="line">  form.submit();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h3><ul>
<li><p>[StripeJS Doc] (<a href="https://stripe.com/docs/stripe.js" target="_blank" rel="external">https://stripe.com/docs/stripe.js</a>)</p>
</li>
<li><p>[StripeJS Element] (<a href="https://stripe.com/docs/elements" target="_blank" rel="external">https://stripe.com/docs/elements</a>)</p>
</li>
<li><p>[My Express Github Shopping Cart] (<a href="https://github.com/kuanhsuh/express-shoppingCart" target="_blank" rel="external">https://github.com/kuanhsuh/express-shoppingCart</a>)</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Integrating Stripe to your app can be separated into two parts, frontend validation and submitting orders through backend server&lt;/p&gt;
&lt;p&gt;I
    
    </summary>
    
    
      <category term="expressJS" scheme="http://yoursite.com/tags/expressJS/"/>
    
      <category term="Stripe" scheme="http://yoursite.com/tags/Stripe/"/>
    
  </entry>
  
  <entry>
    <title>Book Review: Soft Skills</title>
    <link href="http://yoursite.com/2017/06/16/Book-Review-Soft-Skills/"/>
    <id>http://yoursite.com/2017/06/16/Book-Review-Soft-Skills/</id>
    <published>2017-06-16T00:09:59.000Z</published>
    <updated>2017-06-16T01:53:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images-na.ssl-images-amazon.com/images/I/51xaN5j2ykL.jpg" alt="Soft Skills Book" title="Soft Skills"></p>
<h1 id="Book-Review"><a href="#Book-Review" class="headerlink" title="Book Review"></a>Book Review</h1><p>I read this book after I got a job offer, but I have been following John’s youtube channel since I started learning code. John is not a typical developer. He’s buff and besides his prolific coding skiills, he is also good at investing, fitness, and business. He’s main focus is in self development now. I been getting a lot of his advice from his channel then I decided to buy this book and give it a read.</p>
<p>Once I went through the table of contents, I was like WTF? He literally covers everything, and I mean EVERYTHING you need to know for developer. The book mainly focus on the soft skills to become successful in developer career. The book cover huge range of topics ranging from relationship, stocks, fitness, real estate. Through out the books he was able to back up his views with his personal stories.</p>
<p>After reading the book, I don’t agree on some of the things John suggest but it’s cool. The biggest thing I learn from this book is marketing is very important for developers and we must be able to learn things quicky. The key is breaking big things into many small parts and keep practicing. This applies to learning or building a business.</p>
<h3 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h3><ul>
<li><a href="https://www.youtube.com/user/jsonmez" target="_blank" rel="external">Simple Programmer Youtube Channel</a></li>
<li><a href="https://www.amazon.com/Soft-Skills-software-developers-manual/dp/1617292397" target="_blank" rel="external">Soft Skills Amazon Link</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://images-na.ssl-images-amazon.com/images/I/51xaN5j2ykL.jpg&quot; alt=&quot;Soft Skills Book&quot; title=&quot;Soft Skills&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Book-
    
    </summary>
    
    
      <category term="Book Review" scheme="http://yoursite.com/tags/Book-Review/"/>
    
  </entry>
  
  <entry>
    <title>Time to Learn Node/ExpressJS</title>
    <link href="http://yoursite.com/2017/06/16/Express-Time-to-Learn-Node-ExpressJS/"/>
    <id>http://yoursite.com/2017/06/16/Express-Time-to-Learn-Node-ExpressJS/</id>
    <published>2017-06-15T23:37:20.000Z</published>
    <updated>2017-06-16T02:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>After receiving a frontend job, I decided I want to learn some backend development before work started. I realize there’s only so far you can go with just frontend development. Eventually you still need to store the data in the database. Therefore, I decided to go with nodejs because nodeJS is eventually javascript. Hence I can just focus on the backend concepts without need to worry about a new language syntax.</p>
<p>Having some prior Rails Knowledge, I have some idea what a backend language and framework need to do. Here are some concepts I listed that I need to master. (Obviously there are more, but here are some of important ones)</p>
<h3 id="Concepts-to-master"><a href="#Concepts-to-master" class="headerlink" title="Concepts to master"></a>Concepts to master</h3><ul>
<li>basic CRUD</li>
<li>Authenticate</li>
<li>session</li>
<li>Create Apis</li>
<li>relationships with databases</li>
</ul>
<h3 id="Plan-amp-Projects"><a href="#Plan-amp-Projects" class="headerlink" title="Plan &amp; Projects"></a>Plan &amp; Projects</h3><p>My plan is to watch some youtube tutorials and conference talks. Then I’m going to start building projects. The three projects that are currently in my mind are simple blog with comment feature, shopping cart, and a chatbot. Also I going to write 15 blog posts on node.</p>
<p>I’m sure after these three prjects, I’ll have a pretty good understanding on Node. SO Let’s do EEET!!</p>
<h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><ul>
<li><a href="https://medium.com/@amit_tushar/part-uh-what-does-it-take-to-be-a-full-stack-developer-a82c449ec969" target="_blank" rel="external">What does it take to be a full stack developer?</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;After receiving a frontend job, I decided I want to learn some backend development before work started. I realize there’s only so far you
    
    </summary>
    
    
      <category term="expressJS" scheme="http://yoursite.com/tags/expressJS/"/>
    
      <category term="nodeJS" scheme="http://yoursite.com/tags/nodeJS/"/>
    
  </entry>
  
  <entry>
    <title>Basic express CRUD with MongoDB</title>
    <link href="http://yoursite.com/2017/06/16/Express-Basic-express-CRUD-with-MongoDB/"/>
    <id>http://yoursite.com/2017/06/16/Express-Basic-express-CRUD-with-MongoDB/</id>
    <published>2017-06-15T23:36:53.000Z</published>
    <updated>2017-06-19T03:06:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>This is a basic overview of how to do a CRUD process in expressJS with MongoDB.</p>
<h2 id="Database"><a href="#Database" class="headerlink" title="Database."></a>Database.</h2><p>SQL database stores related data tables. NOSQL database stores json like field-value pairs. You can still have primary keys, index, and relationships. I wont talk too much about them here. I’ll do another post when I’m more familar with NOSQL and MYSQL. I’ll be using mongodb for our database. MongoDB is one of the popular NOSQL databases. MongoDB is a document database in which one collection holds different documents. Number of fields, content and size of the document can differ from one document to another.</p>
<p>I’ll be using mongoose which is a ORM for mongodb. Mongoose provides easier API for dealing with Mongodb.</p>
<h2 id="Framework"><a href="#Framework" class="headerlink" title="Framework"></a>Framework</h2><p>ExpressJS is the most popular nodeJS framework. Many other frameworks are bult upon express. Hence, expressJS is the backbone a lot of backend frameworks. Express is very very light and minimalistic, so there’s a lot of work that the developer need to do. That’s also good because I have more control and I can really learn from it.</p>
<p>**Sidenote: I was playing around with Rails before the thing about rails is that it does a lot of things for you. A lot of things just happens and it’s hard to know why. It’s like magic. Express doesn’t do that much so I can really understand how things work.</p>
<h3 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h3><p>I’ll be referring to my express blog project. You can download it or just refer it on my github.</p>
<ol>
<li><p>Install mongoose in package json</p>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install mongoose</div></pre></td></tr></table></figure>
</li>
<li><p>Setup connection in app.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// app.js</span></div><div class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</div><div class="line"></div><div class="line">...</div><div class="line">mongoose.Promise = global.Promise;</div><div class="line">mongoose.connect(<span class="string">'mongodb://localhost/blogv2'</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>Creat model/post.js with schema</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// models/post.js</span></div><div class="line"><span class="keyword">let</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</div><div class="line"></div><div class="line"><span class="comment">// Post Schema</span></div><div class="line"><span class="keyword">let</span> postSchema = mongoose.Schema(&#123;</div><div class="line">  <span class="attr">title</span>: &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;,</div><div class="line">  <span class="attr">body</span>: &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">let</span> Post = <span class="built_in">module</span>.exports = mongoose.model(<span class="string">'Post'</span>, postSchema)</div></pre></td></tr></table></figure>
</li>
<li><p>Go into to mongo shell and enter some sample data</p>
<figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.articles.insert(&#123;title: <span class="string">"Article one"</span>, body: <span class="string">"this is article one"</span>&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>routes/posts.js create CRUD routes</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> router = express.Router();</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Bring in Models</span></div><div class="line"><span class="keyword">let</span> Post = <span class="built_in">require</span>(<span class="string">'../models/post'</span>)</div><div class="line"></div><div class="line"><span class="comment">/* GET Posts . */</span></div><div class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  Post.find(&#123;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, posts</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">      <span class="built_in">console</span>.log(err)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      res.render(<span class="string">'posts/index'</span>, &#123; <span class="attr">posts</span>: [...posts] &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// GET Add Post Route</span></div><div class="line">router.get(<span class="string">'/add'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">  res.render(<span class="string">'posts/addPost'</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// POST Add Post Route</span></div><div class="line">router.post(<span class="string">'/add'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> post = <span class="keyword">new</span> Post(&#123;</div><div class="line">    <span class="attr">title</span>: req.body.title,</div><div class="line">    <span class="attr">body</span>: req.body.body</div><div class="line">  &#125;);</div><div class="line">  post.save(<span class="function"><span class="keyword">function</span>(<span class="params">err, resp</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">      <span class="built_in">console</span>.log(err);</div><div class="line">      res.send(&#123;</div><div class="line">        <span class="attr">message</span>: <span class="string">'something went wrong'</span></div><div class="line">      &#125;);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      res.redirect(<span class="string">'/posts'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// Get Show Post"/posts/&lt;%= post._id%&gt;"</span></div><div class="line">router.get(<span class="string">'/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</div><div class="line">  Post.findById(req.params.id, <span class="function"><span class="keyword">function</span>(<span class="params">err, post</span>)</span>&#123;</div><div class="line">    res.render(<span class="string">'posts/showPost'</span>,&#123;</div><div class="line">      <span class="attr">post</span>: post,</div><div class="line">    &#125;)</div><div class="line">  &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// Get Edit Form</span></div><div class="line">router.get(<span class="string">'/edit/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</div><div class="line">  Post.findById(req.params.id, <span class="function"><span class="keyword">function</span>(<span class="params">err, post</span>)</span>&#123;</div><div class="line">    res.render(<span class="string">'posts/editPost'</span>,&#123;</div><div class="line">      <span class="attr">post</span>: post</div><div class="line">    &#125;)</div><div class="line">  &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//Post Edit Route</span></div><div class="line">router.post(<span class="string">'/edit/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> post = &#123;&#125;</div><div class="line">  post.title = req.body.title</div><div class="line">  post.body = req.body.body</div><div class="line"></div><div class="line">  <span class="keyword">let</span> query = &#123; <span class="attr">_id</span>: req.params.id &#125;</div><div class="line">  Post.update(query, post, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(err)&#123;</div><div class="line">      <span class="built_in">console</span>.log(err)</div><div class="line">      <span class="keyword">return</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      res.redirect(<span class="string">'/posts'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// DELETE Route</span></div><div class="line">router.delete(<span class="string">'/delete/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> query = &#123; <span class="attr">_id</span>: req.params.id&#125;</div><div class="line">  Post.remove(query, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(err)&#123;</div><div class="line">      <span class="built_in">console</span>.log()</div><div class="line">    &#125;</div><div class="line">    res.send(<span class="string">'Success'</span>)</div><div class="line">  &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>Generate the index views to see if all posts shows up</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;%- include ../partials/header %&gt;</div><div class="line"></div><div class="line">  &lt;a href="/posts/add" class="btn btn-md btn-primary"&gt;Add post&lt;/a&gt;</div><div class="line">  &lt;h1&gt;Posts Index Pages&lt;/h1&gt;</div><div class="line">  &lt;h3&gt;Here are the Following posts&lt;/h3&gt;</div><div class="line">  &lt;% posts.forEach(function(post)&#123; %&gt;</div><div class="line">      &lt;h2&gt;&lt;%= post.title %&gt;&lt;/h2&gt;</div><div class="line">      &lt;p&gt;&lt;%= post.body %&gt;&lt;/p&gt;</div><div class="line">      &lt;a href="/posts/&lt;%= post._id%&gt;"&gt;Show&lt;/a&gt;</div><div class="line">      &lt;a href="/posts/edit/&lt;%= post._id%&gt;"&gt;Edit&lt;/a&gt;</div><div class="line">      &lt;a href="#" class="deletePost" data-id="&lt;%= post._id%&gt;"&gt;Delete&lt;/a&gt;</div><div class="line">  &lt;% &#125;) %&gt;</div><div class="line"></div><div class="line">&lt;%- include ../partials/footer %&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>Generate ADD/Update views</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  &lt;%- include ../partials/header %&gt;</div><div class="line"></div><div class="line">&lt;a href="/posts" class="btn btn-lg btn-default"&gt;Back To Index&lt;/a&gt;</div><div class="line">&lt;h1&gt;Add Post&lt;/h1&gt;</div><div class="line"></div><div class="line">&lt;form method='POST', action='/posts/add'&gt;</div><div class="line">&lt;div id="form-group"&gt;</div><div class="line">  &lt;label&gt;Title&lt;/label&gt;</div><div class="line">  &lt;input name='title' type="text" class="form-control"&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div id="form-group"&gt;</div><div class="line">  &lt;label&gt;Body&lt;/label&gt;</div><div class="line">  &lt;input name='body' type="text" class="form-control"&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;br&gt;</div><div class="line">&lt;input value='Submit' type="Submit" class="btn btn-primary"&gt;</div><div class="line"></div><div class="line">&lt;/form&gt;</div><div class="line"></div><div class="line"></div><div class="line">  &lt;%- include ../partials/footer %&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>Setup the DELETE link. In out public/js folder, create a main.js file.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $(<span class="string">'.deletePost'</span>).on(<span class="string">'click'</span>, deletePost);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deletePost</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> confirmation = confirm(<span class="string">'Are you sure?'</span>)</div><div class="line"></div><div class="line">  <span class="keyword">if</span>(confirmation)&#123;</div><div class="line">    $.ajax(&#123;</div><div class="line">      <span class="attr">type</span>: <span class="string">'DELETE'</span>,</div><div class="line">      <span class="attr">url</span>: <span class="string">'/posts/delete/'</span> + $(<span class="keyword">this</span>).data(<span class="string">'id'</span>)</div><div class="line">    &#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</div><div class="line">      <span class="built_in">window</span>.location.replace(<span class="string">'/posts'</span>)</div><div class="line">    &#125;)</div><div class="line">    <span class="built_in">window</span>.location.replace(<span class="string">'/posts'</span>)</div><div class="line"></div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>Here’s the overview of how to create CRUD. You may need to refer to my <a href="https://github.com/kuanhsuh/express-blog" target="_blank" rel="external">github project</a> for more details.</p>
<h3 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h3><ul>
<li><a href="https://github.com/kuanhsuh/express-blog" target="_blank" rel="external">My Express Project</a></li>
<li><a href="http://expressjs.com/" target="_blank" rel="external">expressJS Homepage</a></li>
<li><a href="https://www.mongodb.com/" target="_blank" rel="external">mongoDB</a></li>
<li><a href="http://mongoosejs.com/" target="_blank" rel="external">Mongoose</a></li>
<li><a href="https://www.sitepoint.com/sql-vs-nosql-differences/" target="_blank" rel="external">SQL vs NoSQL: The Differences</a></li>
<li><a href="https://www.tutorialspoint.com/mongodb/mongodb_advantages.htm" target="_blank" rel="external">Mongodb Advantages</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h2&gt;&lt;p&gt;This is a basic overview of how to do 
    
    </summary>
    
    
      <category term="expressJS" scheme="http://yoursite.com/tags/expressJS/"/>
    
      <category term="nodeJS" scheme="http://yoursite.com/tags/nodeJS/"/>
    
  </entry>
  
  <entry>
    <title>Stripejs on express part II</title>
    <link href="http://yoursite.com/2017/06/16/Express-Stripejs-on-express-part-II/"/>
    <id>http://yoursite.com/2017/06/16/Express-Stripejs-on-express-part-II/</id>
    <published>2017-06-15T23:36:23.000Z</published>
    <updated>2017-06-19T03:29:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>After we can our token from stripe.js, now we need to send this token to stripe API with our server. Then our charge will be complete.</p>
<ol>
<li><p>Install stripe through npm</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install stripe</div></pre></td></tr></table></figure>
</li>
<li><p>Implement request - here’s example request from <a href="https://stripe.com/docs/api/node#create_charge" target="_blank" rel="external">Stripe API</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> stripe = <span class="built_in">require</span>(<span class="string">"stripe"</span>)(</div><div class="line">  <span class="string">"sk_test_UawoxUENSN7VkeeMIXXXXX"</span></div><div class="line">);</div><div class="line"></div><div class="line">stripe.charges.create(&#123;</div><div class="line">  <span class="attr">amount</span>: <span class="number">2000</span>,</div><div class="line">  <span class="attr">currency</span>: <span class="string">"usd"</span>,</div><div class="line">  <span class="attr">source</span>: <span class="string">"tok_187waCF6w9JvbRHHBeCqMoBg"</span>, <span class="comment">// obtained with Stripe.js</span></div><div class="line">  description: <span class="string">"Charge for liam.johnson@example.com"</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, charge</span>) </span>&#123;</div><div class="line">  <span class="comment">// asynchronously called</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>We need to modify a couple things</p>
<ul>
<li>amount is measured in cents therefore we need to multiple our amounts by 100.</li>
<li>source is the token generated from our frontend validation</li>
<li>I’m getting these info from my session cart</li>
<li>images from stripe</li>
</ul>
<p>Here’s what my code look like.</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">stripe.charges.create(&#123;</div><div class="line">  <span class="attr">amount</span>: cart.totalPrice * <span class="number">100</span>,</div><div class="line">  <span class="attr">currency</span>: <span class="string">"usd"</span>,</div><div class="line">  <span class="attr">source</span>: req.body.stripeToken, <span class="comment">// obtained with Stripe.js</span></div><div class="line">  description: <span class="string">"Test Charge"</span></div><div class="line">  &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, charge</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">      req.flash(<span class="string">'error'</span>, err.messages)</div><div class="line">      <span class="keyword">return</span> res.redirect(<span class="string">'/checkout'</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// This is where we save our orders</span></div><div class="line">    <span class="keyword">var</span> order = <span class="keyword">new</span> Order(&#123;</div><div class="line">      <span class="attr">name</span>: req.body.name,</div><div class="line">      <span class="attr">address</span>: req.body.address,</div><div class="line">      <span class="attr">cart</span>: cart,</div><div class="line">      <span class="attr">paymentId</span>: charge.id</div><div class="line">    &#125;)</div><div class="line">    order.save(<span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>)</span>&#123;</div><div class="line">      req.flash(<span class="string">'success'</span>, <span class="string">'Successfully bought product'</span>)</div><div class="line">      req.session.cart = <span class="literal">null</span></div><div class="line">      res.redirect(<span class="string">'/'</span>)</div><div class="line">    &#125;)</div><div class="line">  &#125;);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ol>
<p>That should be it man. Your stripe should be charged. Now we need to save our orders.</p>
<h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><ul>
<li><a href="https://stripe.com/docs/api/node#create_charge" target="_blank" rel="external">Stripe Charge API</a></li>
<li><a href="https://github.com/kuanhsuh/express-shoppingCart/blob/master/routes/index.js" target="_blank" rel="external">My github Shopping cart</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;After we can our token from stripe.js, now we need to send this token to stripe API with our server. Then our charge will be complete.&lt;/p
    
    </summary>
    
    
      <category term="expressJS" scheme="http://yoursite.com/tags/expressJS/"/>
    
      <category term="Stripe" scheme="http://yoursite.com/tags/Stripe/"/>
    
  </entry>
  
  <entry>
    <title>100 Days Code Challenge Feedback</title>
    <link href="http://yoursite.com/2017/06/02/100-Days-Code-Challenge-Feedback/"/>
    <id>http://yoursite.com/2017/06/02/100-Days-Code-Challenge-Feedback/</id>
    <published>2017-06-02T05:47:59.000Z</published>
    <updated>2017-06-05T02:06:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>I decided to share a summary and thoughts on my 100dayscodechallenge on facebook.</p>
<p><img src="/images/feedback1.png" alt="Feedback1"><br><img src="/images/feedback2.png" alt="Feedback2"><br><img src="/images/feedback3.png" alt="Feedback3"><br><img src="/images/email.png" alt="Feedback4"></p>
<p>I received close to 1000 likes and over 50 shares. I have to say I’m pretty shocked by the amount of likes that I’m getting from the community.</p>
<p>I even receieved an email from Quicy Larson to share my forum post, which is a great honor.</p>
<p>I received a lot of questions and people asking for suggestiong. Maybe I”ll write in more details in provide more specific answers.</p>
<h3 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h3><ul>
<li><p><a href="https://www.facebook.com/groups/1594816820775537/permalink/1914006175523265/" target="_blank" rel="external">https://www.facebook.com/groups/1594816820775537/permalink/1914006175523265/</a></p>
</li>
<li><p><a href="https://www.facebook.com/groups/358503154261390/permalink/1190322591079438/" target="_blank" rel="external">https://www.facebook.com/groups/358503154261390/permalink/1190322591079438/</a></p>
</li>
<li><p><a href="https://www.facebook.com/groups/f2e.tw/permalink/1304738922896803/" target="_blank" rel="external">https://www.facebook.com/groups/f2e.tw/permalink/1304738922896803/</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I decided to share a summary and thoughts on my 100dayscodechallenge on facebook.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/feedback1.png&quot; alt=&quot;Feedback1&quot;
    
    </summary>
    
    
      <category term="100DaysCodeChallenge" scheme="http://yoursite.com/tags/100DaysCodeChallenge/"/>
    
  </entry>
  
</feed>
